/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/accounts": {
    get: {
      parameters: {
        query: {
          aid?: parameters["rowFilter.accounts.aid"];
          balance?: parameters["rowFilter.accounts.balance"];
          uid?: parameters["rowFilter.accounts.uid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["accounts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** accounts */
          accounts?: definitions["accounts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          aid?: parameters["rowFilter.accounts.aid"];
          balance?: parameters["rowFilter.accounts.balance"];
          uid?: parameters["rowFilter.accounts.uid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          aid?: parameters["rowFilter.accounts.aid"];
          balance?: parameters["rowFilter.accounts.balance"];
          uid?: parameters["rowFilter.accounts.uid"];
        };
        body: {
          /** accounts */
          accounts?: definitions["accounts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/flows": {
    get: {
      parameters: {
        query: {
          fid?: parameters["rowFilter.flows.fid"];
          name?: parameters["rowFilter.flows.name"];
          occurrences?: parameters["rowFilter.flows.occurrences"];
          frequency?: parameters["rowFilter.flows.frequency"];
          uid?: parameters["rowFilter.flows.uid"];
          amount?: parameters["rowFilter.flows.amount"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["flows"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** flows */
          flows?: definitions["flows"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          fid?: parameters["rowFilter.flows.fid"];
          name?: parameters["rowFilter.flows.name"];
          occurrences?: parameters["rowFilter.flows.occurrences"];
          frequency?: parameters["rowFilter.flows.frequency"];
          uid?: parameters["rowFilter.flows.uid"];
          amount?: parameters["rowFilter.flows.amount"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          fid?: parameters["rowFilter.flows.fid"];
          name?: parameters["rowFilter.flows.name"];
          occurrences?: parameters["rowFilter.flows.occurrences"];
          frequency?: parameters["rowFilter.flows.frequency"];
          uid?: parameters["rowFilter.flows.uid"];
          amount?: parameters["rowFilter.flows.amount"];
        };
        body: {
          /** flows */
          flows?: definitions["flows"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/goals": {
    get: {
      parameters: {
        query: {
          gid?: parameters["rowFilter.goals.gid"];
          uid?: parameters["rowFilter.goals.uid"];
          name?: parameters["rowFilter.goals.name"];
          amountTotal?: parameters["rowFilter.goals.amountTotal"];
          amountPaid?: parameters["rowFilter.goals.amountPaid"];
          deadline?: parameters["rowFilter.goals.deadline"];
          priority?: parameters["rowFilter.goals.priority"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["goals"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** goals */
          goals?: definitions["goals"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          gid?: parameters["rowFilter.goals.gid"];
          uid?: parameters["rowFilter.goals.uid"];
          name?: parameters["rowFilter.goals.name"];
          amountTotal?: parameters["rowFilter.goals.amountTotal"];
          amountPaid?: parameters["rowFilter.goals.amountPaid"];
          deadline?: parameters["rowFilter.goals.deadline"];
          priority?: parameters["rowFilter.goals.priority"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          gid?: parameters["rowFilter.goals.gid"];
          uid?: parameters["rowFilter.goals.uid"];
          name?: parameters["rowFilter.goals.name"];
          amountTotal?: parameters["rowFilter.goals.amountTotal"];
          amountPaid?: parameters["rowFilter.goals.amountPaid"];
          deadline?: parameters["rowFilter.goals.deadline"];
          priority?: parameters["rowFilter.goals.priority"];
        };
        body: {
          /** goals */
          goals?: definitions["goals"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/transactions": {
    get: {
      parameters: {
        query: {
          tid?: parameters["rowFilter.transactions.tid"];
          timestamp?: parameters["rowFilter.transactions.timestamp"];
          gid?: parameters["rowFilter.transactions.gid"];
          fid?: parameters["rowFilter.transactions.fid"];
          amount?: parameters["rowFilter.transactions.amount"];
          uid?: parameters["rowFilter.transactions.uid"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["transactions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** transactions */
          transactions?: definitions["transactions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          tid?: parameters["rowFilter.transactions.tid"];
          timestamp?: parameters["rowFilter.transactions.timestamp"];
          gid?: parameters["rowFilter.transactions.gid"];
          fid?: parameters["rowFilter.transactions.fid"];
          amount?: parameters["rowFilter.transactions.amount"];
          uid?: parameters["rowFilter.transactions.uid"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          tid?: parameters["rowFilter.transactions.tid"];
          timestamp?: parameters["rowFilter.transactions.timestamp"];
          gid?: parameters["rowFilter.transactions.gid"];
          fid?: parameters["rowFilter.transactions.fid"];
          amount?: parameters["rowFilter.transactions.amount"];
          uid?: parameters["rowFilter.transactions.uid"];
        };
        body: {
          /** transactions */
          transactions?: definitions["transactions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description Rows represent user's account. */
  accounts: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    aid: number;
    /** Format: double precision */
    balance: number;
    /** Format: uuid */
    uid: string;
  };
  flows: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    fid: number;
    /** Format: character varying */
    name: string;
    /** Format: smallint */
    occurrences: number;
    /** Format: character varying */
    frequency: string;
    /** Format: uuid */
    uid: string;
    /** Format: bigint */
    amount: number;
  };
  goals: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    gid: number;
    /** Format: uuid */
    uid: string;
    /** Format: character varying */
    name: string;
    /** Format: double precision */
    amountTotal: number;
    /** Format: double precision */
    amountPaid: number;
    /** Format: timestamp with time zone */
    deadline: string;
    /** Format: bigint */
    priority: number;
  };
  transactions: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    tid: number;
    /** Format: timestamp with time zone */
    timestamp: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `goals.gid`.<fk table='goals' column='gid'/>
     */
    gid?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `flows.fid`.<fk table='flows' column='fid'/>
     */
    fid?: number;
    /** Format: bigint */
    amount: number;
    /** Format: uuid */
    uid: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description accounts */
  "body.accounts": definitions["accounts"];
  /** Format: bigint */
  "rowFilter.accounts.aid": string;
  /** Format: double precision */
  "rowFilter.accounts.balance": string;
  /** Format: uuid */
  "rowFilter.accounts.uid": string;
  /** @description flows */
  "body.flows": definitions["flows"];
  /** Format: bigint */
  "rowFilter.flows.fid": string;
  /** Format: character varying */
  "rowFilter.flows.name": string;
  /** Format: smallint */
  "rowFilter.flows.occurrences": string;
  /** Format: character varying */
  "rowFilter.flows.frequency": string;
  /** Format: uuid */
  "rowFilter.flows.uid": string;
  /** Format: bigint */
  "rowFilter.flows.amount": string;
  /** @description goals */
  "body.goals": definitions["goals"];
  /** Format: bigint */
  "rowFilter.goals.gid": string;
  /** Format: uuid */
  "rowFilter.goals.uid": string;
  /** Format: character varying */
  "rowFilter.goals.name": string;
  /** Format: double precision */
  "rowFilter.goals.amountTotal": string;
  /** Format: double precision */
  "rowFilter.goals.amountPaid": string;
  /** Format: timestamp with time zone */
  "rowFilter.goals.deadline": string;
  /** Format: bigint */
  "rowFilter.goals.priority": string;
  /** @description transactions */
  "body.transactions": definitions["transactions"];
  /** Format: bigint */
  "rowFilter.transactions.tid": string;
  /** Format: timestamp with time zone */
  "rowFilter.transactions.timestamp": string;
  /** Format: bigint */
  "rowFilter.transactions.gid": string;
  /** Format: bigint */
  "rowFilter.transactions.fid": string;
  /** Format: bigint */
  "rowFilter.transactions.amount": string;
  /** Format: uuid */
  "rowFilter.transactions.uid": string;
}

export interface operations {}

export interface external {}
